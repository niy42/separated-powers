"use client"

import React, { useState } from 'react';
import styled from 'styled-components';

// Mock data for users in different roles
const roles = {
  A: 'Role A',
  B: 'Role B',
};

// Styled Components for better UI
const Container = styled.div`
  padding: 20px;
  max-width: 800px;
  margin: 0 auto;
  background-color: #f8f9fa;
  border-radius: 10px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
`;

const Header = styled.h2`
  text-align: center;
  font-size: 2rem;
  color: #343a40;
`;

const Button = styled.button<{ primary?: boolean }>`
  background-color: ${({ primary }: any) => (primary ? '#007bff' : '#6c757d')};
  color: white;
  border: none;
  border-radius: 5px;
  padding: 10px 20px;
  margin: 10px;
  cursor: pointer;
  font-size: 1rem;
  transition: background-color 0.3s;

  &:hover {
    background-color: ${({ primary }: any) => (primary ? '#0056b3' : '#5a6268')};
  }
`;

const ProposalList = styled.ul`
  list-style: none;
  padding: 0;
`;

const ProposalItem = styled.li`
  background-color: #fff;
  border: 1px solid #dee2e6;
  border-radius: 8px;
  padding: 15px;
  margin: 10px 0;
  display: flex;
  flex-direction: column;
`;

const ProposalStatus = styled.p<{ status: string }>`
  font-weight: bold;
  color: ${(props: { status: string }) => (props.status === 'Approved' ? 'green' : 'orange')};
`;

const SwitchRoleContainer = styled.div`
  display: flex;
  justify-content: center;
  margin: 20px 0;
`;

const RoleIndicator = styled.p`
  font-size: 1.2rem;
  font-weight: bold;
  color: #007bff;
`;

// Type for Proposal
interface Proposal {
  id: number;
  description: string;
  status: string;
  roleAApproved: boolean;
  roleBApproved: boolean;
}

// Initial proposals
const initialProposals: Proposal[] = [
  { id: 1, description: 'Increase treasury funds', status: 'Pending', roleAApproved: false, roleBApproved: false },
  { id: 2, description: 'Launch new community event', status: 'Pending', roleAApproved: false, roleBApproved: false },
];

const Governance: React.FC = () => {
  const [proposals, setProposals] = useState<Proposal[]>(initialProposals);
  const [role, setRole] = useState<string>(roles.A); // Simulate current user's role (either Role A or Role B)

  // Function for Role A to propose a decision
  const proposeDecision = (newDescription: string) => {
    const newProposal: Proposal = {
      id: proposals.length + 1,
      description: newDescription,
      status: 'Pending',
      roleAApproved: false,
      roleBApproved: false,
    };
    setProposals([...proposals, newProposal]);
  };

  // Function for Role A to approve the proposal
  const approveByRoleA = (id: number) => {
    setProposals(
      proposals.map((proposal) =>
        proposal.id === id ? { ...proposal, roleAApproved: true } : proposal
      )
    );
  };

  // Function for Role B to check and approve the proposal
  const approveByRoleB = (id: number) => {
    setProposals(
      proposals.map((proposal) =>
        proposal.id === id && proposal.roleAApproved
          ? { ...proposal, roleBApproved: true, status: 'Approved' }
          : proposal
      )
    );
  };

  return (
    <Container>
      <Header>DAO Governance - Separated Powers</Header>
      <SwitchRoleContainer>
        <RoleIndicator>Current Role: {role}</RoleIndicator>
        <Button primary onClick={() => setRole(role === roles.A ? roles.B : roles.A)}>
          Switch Role
        </Button>
      </SwitchRoleContainer>

      {role === roles.A && (
        <div>
          <h4>Create a New Proposal (Role A)</h4>
          <Button primary onClick={() => proposeDecision('New DAO Improvement')}>
            Propose "New DAO Improvement"
          </Button>
        </div>
      )}

      <h4>Proposals</h4>
      <ProposalList>
        {proposals.map((proposal) => (
          <ProposalItem key={proposal.id}>
            <p>{proposal.description}</p>
            <ProposalStatus status={proposal.status}>Status: {proposal.status}</ProposalStatus>
            <p>Role A Approved: {proposal.roleAApproved ? 'Yes' : 'No'}</p>
            <p>Role B Approved: {proposal.roleBApproved ? 'Yes' : 'No'}</p>
            {role === roles.A && !proposal.roleAApproved && (
              <Button onClick={() => approveByRoleA(proposal.id)}>Approve as Role A</Button>
            )}
            {role === roles.B && proposal.roleAApproved && !proposal.roleBApproved && (
              <Button primary onClick={() => approveByRoleB(proposal.id)}>Approve as Role B</Button>
            )}
          </ProposalItem>
        ))}
      </ProposalList>
    </Container>
  );
};

export default Governance;
